name: Examine the Rust Core
on:
  push:
    branches:
      - develop
      - production
    paths:
      - ".github/workflows/examine-core.yml"
      - ".github/actions/**"
      - "src/**"
      - "tests/**"
      - "examples/**"
      - "Cargo.toml"
      - "Cargo.lock"
  pull_request:
    branches:
      - develop
      - production
    paths:
      - ".github/workflows/examine-core.yml"
      - ".github/actions/**"
      - "src/**"
      - "tests/**"
      - "examples/**"
      - "Cargo.toml"
      - "Cargo.lock"
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch:

concurrency: 
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    if: ${{ ! github.event.schedule }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v3

      - name: Set Up Nightly Rust
        uses: ./.github/actions/setup-rust
        with:
          toolchain: nightly
          cache: true
          cache-job-id: ${{ github.workflow }}-${{ github.job }}-${{ matrix.os }}
          cache-hash: ${{ hashFiles('.github/workflows/examine-core.yml') }}

      - name: Install Required Dependencies (Ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update
          sudo apt-get install libudev-dev libusb-1.0-0-dev

      - name: Run Cargo Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --release

  lint:
    name: Lint
    if: ${{ ! github.event.schedule }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v3

      - name: Set Up Beta Clippy
        uses: ./.github/actions/setup-rust
        with:
          toolchain: beta
          components: clippy
          cache: true
          cache-job-id: ${{ github.workflow }}-${{ github.job }}
          cache-hash: ${{ hashFiles('.github/workflows/examine-core.yml') }}

      - name: Install Required Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libudev-dev libusb-1.0-0-dev

      - name: Run Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- --deny warnings
          name: Clippy Results for the Rust Core

  check-unused-deps:
    name: Check Unused Dependencies
    if: ${{ ! github.event.schedule }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v3

      - name: Install Cargo-udeps with Nightly Rust
        uses: ./.github/actions/setup-rust
        with:
          toolchain: nightly
          install: cargo-udeps
          cache: true
          cache-job-id: ${{ github.workflow }}-${{ github.job }}
          cache-hash: ${{ hashFiles('.github/workflows/examine-core.yml') }}

      - name: Install Required Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libudev-dev libusb-1.0-0-dev

      - name: Run Cargo Udeps
        uses: actions-rs/cargo@v1
        with:
          command: udeps
          args: --all-targets --all-features

  check-format:
    name: Check Format
    if: ${{ ! github.event.schedule }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v3

      - name: Set Up Nightly Rustfmt
        uses: ./.github/actions/setup-rust
        with:
          toolchain: nightly
          components: rustfmt
          cache: false

      - name: Install cargo-license-template
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --force cargo-license-template

      - name: Run Cargo Fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo-license-template
        uses: actions-rs/cargo@v1
        with:
          command: license-template
          args: --template .license_template

  audit:
    name: Perform Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v3

      - name: Install Cargo-audit with Nightly Rust
        uses: ./.github/actions/setup-rust
        with:
          toolchain: nightly
          install: cargo-audit
          cache: true
          cache-job-id: ${{ github.workflow }}-${{ github.job }}
          cache-hash: ${{ hashFiles('.github/workflows/examine-core.yml') }}

      - name: Run Cargo Audit
        uses: actions-rs/cargo@v1
        with:
          command: audit
          # The ignored security advisories:
          #
          # - RUSTSEC-2020-0026: linked-hash-map creates uninitialized NonNull pointer.
          #   - A transitive dependency of riker. A new version of Stronghold should fix this.
          # - RUSTSEC-2020-0159: Potential segfault in `localtime_r` invocations.
          #   - From chrono, depended bt riker, depended by iota_stronghold. A new version of Stronghold should fix this.
          # - RUSTSEC-2020-0071: Potential segfault in the time crate.
          #   - A dependency of chrono; related to RUSTSEC-2020-0159. A new version of Stronghold should fix this.
          # - RUSTSEC-2021-0119: Out-of-bounds write in nix::unistd::getgrouplist.
          #   - A dependency of iota-ledger; it should be updated.
          #   - We don't call this API, so we should be fine.
          args: --file Cargo.lock --deny warnings --ignore RUSTSEC-2020-0026 --ignore RUSTSEC-2020-0159 --ignore RUSTSEC-2020-0071 --ignore RUSTSEC-2021-0119
